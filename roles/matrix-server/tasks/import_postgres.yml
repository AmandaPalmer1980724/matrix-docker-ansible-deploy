---

# Pre-checks

- name: Fail if playbook called incorrectly
  fail: msg="The `server_path_postgres_dump` variable needs to be provided to this playbook, via --extra-vars"
  when: "server_path_postgres_dump is not defined or server_path_postgres_dump.startswith('<')"

- name: Check if the provided Postgres dump file exists
  stat: path="{{ server_path_postgres_dump }}"
  register: result_server_path_postgres_dump_stat

- name: Fail if provided Postgres dump file doesn't exists
  fail: msg="File cannot be found on the local machine at {{ server_path_postgres_dump }}"
  when: not result_server_path_postgres_dump_stat.stat.exists

- include: tasks/util/detect_existing_postgres_version.yml

- name: Abort, if no existing Postgres version detected
  fail: msg="Could not find existing Postgres installation"
  when: "not matrix_postgres_detected_existing"


# Defaults

- name: Set postgres_start_wait_time, if not provided
  set_fact:
    postgres_start_wait_time: 15
  when: "postgres_start_wait_time|default('') == ''"


# Actual import work

- name: Ensure matrix-postgres is started
  service: name=matrix-postgres state=started daemon_reload=yes

- name: Wait a bit, so that Postgres can start
  wait_for:
    timeout: "{{ postgres_start_wait_time }}"
  delegate_to: 127.0.0.1
  become: false

- name: Perform Postgres database import
  command: |
    /usr/bin/docker run --rm --name matrix-postgres-import \
    --network={{ matrix_docker_network }} \
    --env-file={{ matrix_environment_variables_data_path }}/env-postgres-pgsql-docker \
    -v {{ server_path_postgres_dump }}:{{ server_path_postgres_dump }}:ro \
    --entrypoint=/bin/sh
    {{ matrix_postgres_docker_image_latest }}
    -c 'cat {{ server_path_postgres_dump }} | \
    {{ 'gunzip |' if server_path_postgres_dump.endswith('.gz') else '' }}
    psql -v ON_ERROR_STOP=1 -h matrix-postgres'
