---

- name: Fail if required settings not defined
  fail:
    msg: >-
      You need to define a required configuration setting (`{{ item }}`).
  when: "vars[item] == ''"
  with_items:
    - "matrix_appservice_slack_control_room_id"
    - "matrix_appservice_slack_appservice_token"
    - "matrix_appservice_slack_homeserver_token"
    - "matrix_appservice_slack_id_token"

- block:
  - name: Check if a neDB database already exists
    stat:
      path: "{{ matrix_appservice_slack_data_path }}/"
    register: matrix_appservice_slack_nedb_stat_result

  - name: Fail if an neDB database already exists when using Postgres
    fail:
      msg: >-2
        matrix_appservice_slack_database_engine has been set to `postgres` (which is our new default now).
        However, we've discovered an existing neDB database in {{ matrix_appservice_slack_data_path }}/.
        It appears that you've been using this bridge with the neDB engine until now.
        To continue using neDB, opt into it explicitly: add `matrix_appservice_slack_database_engine: nedb` to your vars.yml file and re-run this same command.
        Alternatively, to migrate your existing neDB database to Postgres:
        1. Stop all services (`ansible-playbook -i inventory/hosts setup.yml --tags=stop`)
        2. Import the neDB database into Postgres (`ansible-playbook -v -i inventory/hosts setup.yml --tags=import-generic-sqlite-db --extra-vars='sqlite_database_path={{ matrix_appservice_slack_data_path }} postgres_connection_string_variable_name=matrix_appservice_slack_database_connString'`)
        3. Re-run the playbook (`ansible-playbook -i inventory/hosts setup.yml --tags=setup-all,start`)
    when: "matrix_appservice_slack_nedb_stat_result.stat.exists"
  when: "matrix_appservice_slack_database_engine == 'postgres'"
